<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.application.trainingVer2.dao.MemberDAO">

	<!-- 회원가입 -->
	<insert id="createMember" parameterType="MemberDTO">
		INSERT INTO MEMBER (
			MEMBER_ID,
			PASSWD,
			PROFILE_ORIGINAL_NAME,
			PROFILE_UUID,
			MEMBER_NM,
			SEX,
			BIRTH_AT,
			HP,
			SMSSTS_YN,
			EMAIL,
			EMAILSTS_YN,
			ZIPCODE,
			ROAD_ADDRESS,
			JIBUN_ADDRESS,
			NAMUJI_ADDRESS,
			ETC
		) 
		VALUES (
			#{memberId},
			#{passwd},
			#{profileOriginalName},
			#{profileUUID},
			#{memberNm},
			#{sex},
			#{birthAt},
			#{hp},
			#{smsstsYn},
			#{email},
			#{emailstsYn},
			#{zipcode},
			#{roadAddress},
			#{jibunAddress},
			#{namujiAddress},
			#{etc}
		 )
	</insert>	
	
	
	<!-- 아이디 중복 체크 -->
	<select id="checkValidId" parameterType="String" resultType="String"> 
		SELECT MEMBER_ID
		FROM   MEMBER
		WHERE  MEMBER_ID = #{memberId}
	</select>
	
	
	<!-- 암호화된 패스워드 조회 -->
	<select id="getEncodedPasswd" parameterType="String" resultType="String">
		SELECT	PASSWD
		FROM	MEMBER
		WHERE	MEMBER_ID = #{memberId}
	</select>
	
	
	<!-- 회원정보 상세조회 -->
	<select id="getMemberDetail"  parameterType="String" resultType="MemberDTO">
		SELECT	*
		FROM	MEMBER
		WHERE	MEMBER_ID = #{memberId}
	</select>
	
	
	<!-- 회원정보수정 -->
	<update id="updateMember" parameterType="MemberDTO">
		UPDATE	MEMBER
		SET		PROFILE_ORIGINAL_NAME = #{profileOriginalName},
				PROFILE_UUID = #{profileUUID},
				MEMBER_NM = #{memberNm},
				SEX = #{sex}, 
				BIRTH_AT = #{birthAt}, 
				HP = #{hp},  
				SMSSTS_YN = #{smsstsYn},  
				EMAIL = #{email}, 
				EMAILSTS_YN = #{emailstsYn},  
				ZIPCODE = #{zipcode},  
				ROAD_ADDRESS = #{roadAddress},
				JIBUN_ADDRESS = #{jibunAddress},  
				NAMUJI_ADDRESS = #{namujiAddress},  
				ETC = #{etc},
				MODIFY_AT = NOW()
		WHERE	MEMBER_ID = #{memberId}
	</update>	

	<!-- 탈퇴회원 프로필 조회 -->
	<select id="getDeleteMemberProfileUuid" parameterType="String" resultType="String">
		SELECT PROFILE_UUID
		FROM   MEMBER
		WHERE  MEMBER_ID = #{memberId}
	</select>


	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="String">
		DELETE FROM MEMBER
		WHERE		MEMBER_ID = #{memberId}
	</delete>

</mapper>